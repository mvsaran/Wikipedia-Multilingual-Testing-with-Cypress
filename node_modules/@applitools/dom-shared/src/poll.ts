import chunkify from './chunkify'

const STATUSES = {
  WIP: 'WIP',
  SUCCESS: 'SUCCESS',
  SUCCESS_CHUNKED: 'SUCCESS_CHUNKED',
  ERROR: 'ERROR',
} as const

const _DEFAULT_CHUNK_BYTE_LENGTH = 268435456 // 256MB

type PollState = {
  value?: any
  error?: string
  chunks?: number[]
  from: number
}

type PollOptions = {
  chunkByteLength?: number
}

function createPollResponse(state: PollState, {chunkByteLength = 0}: PollOptions = {}) {
  if (!state) {
    return {
      status: STATUSES.ERROR,
      error: 'unexpected poll request received - cannot find state of current operation',
    }
  } else if (state.value) {
    if (chunkByteLength) {
      if (!state.chunks) {
        try {
          const stringified = JSON.stringify(state.value)
          state.chunks = chunkify(stringified, chunkByteLength)
          if (state.chunks.length > 0) {
            state.from = 0
            state.value = stringified
          }
        } catch (e: any) {
          return {status: STATUSES.ERROR, error: e.message}
        }
      }
      if (state.from >= 0) {
        return {
          status: STATUSES.SUCCESS_CHUNKED,
          value: state.value.substring(state.from, (state.from = state.chunks.shift()!)),
          done: !state.from,
        }
      }
    }
    return {status: STATUSES.SUCCESS, value: state.value}
  } else if (state.error) {
    return {status: STATUSES.ERROR, error: state.error}
  } else {
    return {status: STATUSES.WIP}
  }
}

function poll(context: Record<string, PollState>, key: string, options: PollOptions = {}): any {
  context = context || {}
  const result = createPollResponse(context[key], options)

  if (
    result.status === STATUSES.SUCCESS ||
    result.status === STATUSES.ERROR ||
    (result.status === STATUSES.SUCCESS_CHUNKED && result.done)
  ) {
    delete context[key]
  }

  return result
}

export = poll
