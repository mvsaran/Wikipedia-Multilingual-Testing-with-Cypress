import assert from 'assert'
import {promisify as p} from 'util'
import pollify from '../src/pollify'
const delay = p(setTimeout)

describe('pollify', () => {
  it('works', async () => {
    const func = (result: any) => new Promise(resolve => setTimeout(resolve, 100, result))
    const funcPoll = pollify(func, {}, 'key')()
    assert.strictEqual(typeof funcPoll, 'function')
    const r = funcPoll('result')
    assert.deepStrictEqual(r, {status: 'WIP'})
    await delay(120)
    const r2 = funcPoll('result 2')
    assert.deepStrictEqual(r2, {status: 'SUCCESS', value: 'result'})
  })

  it('returns error when rejects', async () => {
    const func = () => new Promise((_, reject) => setTimeout(reject, 100, new Error('error')))
    const funcPoll = pollify(func, {}, 'key')()
    const r = funcPoll()
    assert.deepStrictEqual(r, {status: 'WIP'})
    await delay(120)
    const r2 = funcPoll()
    if (r2.error) r2.error = r2.error.split('\nStack:')[0]
    assert.deepStrictEqual(r2, {status: 'ERROR', error: 'error'})
  })

  it('does not execute script synchronously', async () => {
    const funcPoll = pollify(() => 42, {}, 'key')()
    assert.deepStrictEqual(funcPoll(), {status: 'WIP'})
    await delay(0)
    assert.deepStrictEqual(funcPoll(), {status: 'SUCCESS', value: 42})
  })
})
