"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerDefaultScripts = exports.makeRegisterOnNewDocumentScripts = void 0;
const driver_1 = require("@applitools/driver");
const utils_1 = require("@applitools/utils");
function wrapFunctionAsIIFE(fn) {
    return `(()=>{ ${fn.toString()} return ${fn.name}.call()})()`;
}
function makeRegisterOnNewDocumentScripts({ spec, logger }) {
    return async function registerOnNewDocumentScripts({ target, enableScripts, }) {
        const driver = await (0, driver_1.makeDriver)({ spec, driver: target, logger });
        return registerDefaultScripts({ driver, logger, enableScripts });
    };
}
exports.makeRegisterOnNewDocumentScripts = makeRegisterOnNewDocumentScripts;
async function registerDefaultScripts({ driver, enableScripts, logger, }) {
    if (!driver)
        return [];
    try {
        const captureImagesScript = wrapFunctionAsIIFE(utils_1.snippets.captureImagesFunc);
        const scripts = [];
        if (utils_1.general.getEnvValue('CAPTURE_CANVAS_WITH_WEBGL', 'boolean') === true ||
            (enableScripts === null || enableScripts === void 0 ? void 0 : enableScripts.captureImagesScript) === true) {
            scripts.push({ name: 'captureImagesScript', code: captureImagesScript });
        }
        if (utils_1.general.getEnvValue('CAPTURE_CANVAS_WITH_PRESERVE_DRAWING_BUFFER', 'boolean') === true ||
            (enableScripts === null || enableScripts === void 0 ? void 0 : enableScripts.enableCanvasPreserveDrawingBufferScript) === true) {
            scripts.push({
                name: 'enableCanvasPreserveDrawingBufferScript',
                code: wrapFunctionAsIIFE(utils_1.snippets.enableCanvasPreserveDrawingBuffer),
            });
        }
        if (utils_1.general.getEnvValue('CAPTURE_CANVAS_WITH_PRESERVE_DRAWING_BUFFER', 'boolean') === false ||
            (enableScripts === null || enableScripts === void 0 ? void 0 : enableScripts.disableCanvasPreserveDrawingBufferScript) === true) {
            scripts.push({
                name: 'disableCanvasPreserveDrawingBufferScript',
                code: wrapFunctionAsIIFE(utils_1.snippets.disableCanvasPreserveDrawingBuffer),
            });
        }
        await Promise.all(scripts.map(async (script) => {
            logger.info('running user script', script.name);
            await driver.addScriptToEvaluateOnNewDocument(script.code);
            logger.info('user script registered successfully', script.name);
        }));
        return scripts;
    }
    catch (error) {
        logger.error(error);
        return [];
    }
}
exports.registerDefaultScripts = registerDefaultScripts;
